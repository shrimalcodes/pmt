{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c92fe5a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef9ef440",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        HHID  cons_arhar_tur  cons_attaNormal  cons_attaPDS  cons_bajra  \\\n",
      "0  410001101             121              720             0           0   \n",
      "1  410001102              60              180             0          40   \n",
      "2  410001103             195              600             0           0   \n",
      "3  410001201             130              350             0           0   \n",
      "4  410001202              65              220             0           0   \n",
      "\n",
      "   cons_bakery  cons_beans  cons_beer  cons_bidi  cons_brinjal  ...  \\\n",
      "0            0           0          0          0           160  ...   \n",
      "1           50          25          0          0             0  ...   \n",
      "2            0           0          0          0            96  ...   \n",
      "3           30          40          0          0            32  ...   \n",
      "4            0           0          0          0            80  ...   \n",
      "\n",
      "        _merge  pc_Cons_exp  BPL  costly_dal  cheap_dal  basic_veggie  \\\n",
      "0  Matched (3)  3304.800049  0.0       121.0       17.0         240.0   \n",
      "1  Matched (3)  7613.000000  0.0        75.0      135.0          62.0   \n",
      "2  Matched (3)  3461.399902  0.0       195.0       65.0         250.0   \n",
      "3  Matched (3)  3339.000000  0.0       130.0      100.0         101.0   \n",
      "4  Matched (3)  2604.250000  0.0        65.0       32.0         160.0   \n",
      "\n",
      "   non_basic_veggie  rural  Reg_salary_earner  has_ration_card  \n",
      "0             500.0    0.0                1.0              1.0  \n",
      "1             271.0    0.0                1.0              1.0  \n",
      "2             688.0    0.0                1.0              1.0  \n",
      "3             330.0    0.0                1.0              1.0  \n",
      "4             372.0    0.0                0.0              1.0  \n",
      "\n",
      "[5 rows x 144 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_stata('toutlemondefinal.dta') # Display the first few rows of the DataFrame \n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91e6cdb6-c0e5-4cfc-b01c-a20aae89064f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101662, 144)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26697bcb-7901-4dc7-9cf7-4c88907fdf64",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "65fec4b4-6966-4e1a-9a1d-f541e8dae2d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HHID', 'cons_arhar_tur', 'cons_attaNormal', 'cons_attaPDS', 'cons_bajra', 'cons_bakery', 'cons_beans', 'cons_beer', 'cons_bidi', 'cons_brinjal', 'cons_cabbage', 'cons_carrot', 'cons_cauliflower', 'cons_cereal_tot', 'cons_cigarettes', 'cons_coal', 'cons_condensed_milk', 'cons_country_liquor', 'cons_dryfruits_tot', 'cons_dung_cake', 'cons_egg_meat_tot', 'cons_electricity', 'cons_firewood', 'cons_fruits_tot', 'cons_ghee', 'cons_gourds_pumpkin', 'cons_green_chillies', 'cons_gur', 'cons_jowar', 'cons_kerosene_PDS', 'cons_ladyfinger', 'cons_leaf_tobacco', 'cons_leafyveggie', 'cons_lemon', 'cons_maida', 'cons_masur', 'cons_milk', 'cons_milk_tot', 'cons_mineral_water', 'cons_moong', 'cons_oil_tot', 'cons_onion', 'cons_otherveggie', 'cons_p_processed_food_tot', 'cons_pan_tot', 'cons_parwal', 'cons_peas', 'cons_petrol', 'cons_potato', 'cons_pulses_tot', 'cons_radish', 'cons_ragi', 'cons_refined_liquor', 'cons_refined_oil', 'cons_riceNormal', 'cons_ricePDS', 'cons_s_processed_food_tot', 'cons_salt', 'cons_spices_tot', 'cons_sugarPDS', 'cons_toddy', 'cons_tomato', 'cons_urd', 'cons_vanaspati_oil', 'Cons_exp', 'Whether_Possesses_numeric', 'Sector', 'Sector_num', 'HH_Size', 'HH_Size_num', 'HH_Type', 'Land_owned', 'Land_total_possessed', 'Lighting_Code', 'Dwelling_unit_Code', 'Regular_salary_earner_num', 'Possess_ration_card', 'Sex', 'Age', 'Days_stayed_away', 'Meals_per_day', 'Education_num', 'Marital_status_num', 'cons_bedding_tot', 'cons_clothes_tot', 'cons_footwear_tot', 'cons_leather_sandals', 'cons_leather_shoes', 'cons_mosquito_net', 'cons_quilt_matress', 'cons_rubber_footwear', 'cons_secondhand_clothes', 'cons_secondhand_footware', 'cons_uniform_boys', 'cons_uniform_girls', 'cons_doctor_fee', 'cons_educ_exp_tot', 'cons_med_insti_tot', 'cons_medicine', 'cons_tuition_fee', 'cons_cable_TV', 'cons_cinema', 'cons_entertainment_tot', 'cons_hobby_goods', 'cons_houserent_actual', 'cons_houserent_imputed_U', 'cons_internet_expense', 'cons_misc_HH_consumables_tot', 'cons_non_insti_med_tot', 'cons_pads', 'cons_servant', 'cons_spectacle', 'cons_toiletries', 'cons_torch', 'cons_water_bill', 'WH_Radio', 'WH_electric_fan', 'WH_AC_cooler', 'WH_washing_machine', 'WH_stove', 'WH_fridge', 'WH_bicycle', 'WH_motorcycle', 'WH_car', 'WH_PC_laptop', 'WH_mobile', 'WH_telephone', '_merge', 'pc_Cons_exp', 'BPL', 'costly_dal', 'cheap_dal', 'basic_veggie', 'non_basic_veggie', 'rural', 'Reg_salary_earner', 'has_ration_card', 'Religion_buddhist', 'Religion_christian', 'Religion_hindu', 'Religion_jain', 'Religion_muslim', 'Religion_other', 'Religion_parsi', 'Religion_sikh', 'Social_Group_OBC', 'Social_Group_SC', 'Social_Group_ST', 'Social_Group_other', 'Type_of_land_owned_homestead & other', 'Type_of_land_owned_homestead only', 'Type_of_land_owned_other only', 'Cooking_Code_LPG', 'Cooking_Code_charcoal', 'Cooking_Code_coke, coal', 'Cooking_Code_dung cake', 'Cooking_Code_electricity', 'Cooking_Code_firewood and chips', 'Cooking_Code_gobar gas', 'Cooking_Code_kerosene', 'Cooking_Code_no cooking arrangement', 'Cooking_Code_others', 'type_of_ration_card_BPL', 'type_of_ration_card_NoRation', 'type_of_ration_card_others', 'Marital_status_currently married', 'Marital_status_divorced/separated', 'Marital_status_never married', 'Marital_status_widowed', 'Education_diploma/certificate course', 'Education_graduate', 'Education_higher secondary', 'Education_lwfs below primary', 'Education_lwfs by EGS/NFEC/AEC', 'Education_lwfs by TLC', 'Education_lwfs by others', 'Education_middle', 'Education_not literate', 'Education_postgraduate and above', 'Education_primary', 'Education_secondary']\n"
     ]
    }
   ],
   "source": [
    "# Import pandas if not already done\n",
    "# List of categorical variables\n",
    "categorical_vars = ['Religion', 'Social_Group', 'Type_of_land_owned', 'Cooking_Code', 'type_of_ration_card', 'Marital_status', 'Education']\n",
    "\n",
    "# Convert to dummy variables\n",
    "data = pd.get_dummies(df, columns=categorical_vars, drop_first=True)\n",
    "\n",
    "# Check the first few rows to confirm dummy variables were created\n",
    "print(data.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06c77541-e296-4048-af2b-bb62a25b876e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/3w/5w6s9nld1y39p5mrz9f82ywm0000gn/T/ipykernel_41957/2546987809.py:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  data = data.replace({True: 1, False: 0})\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        HHID  cons_arhar_tur  cons_attaNormal  cons_attaPDS  cons_bajra  \\\n",
      "0  410001101             121              720             0           0   \n",
      "1  410001102              60              180             0          40   \n",
      "2  410001103             195              600             0           0   \n",
      "3  410001201             130              350             0           0   \n",
      "4  410001202              65              220             0           0   \n",
      "\n",
      "   cons_bakery  cons_beans  cons_beer  cons_bidi  cons_brinjal  ...  \\\n",
      "0            0           0          0          0           160  ...   \n",
      "1           50          25          0          0             0  ...   \n",
      "2            0           0          0          0            96  ...   \n",
      "3           30          40          0          0            32  ...   \n",
      "4            0           0          0          0            80  ...   \n",
      "\n",
      "   Education_higher secondary  Education_lwfs below primary  \\\n",
      "0                           0                             0   \n",
      "1                           0                             0   \n",
      "2                           0                             0   \n",
      "3                           0                             0   \n",
      "4                           0                             0   \n",
      "\n",
      "   Education_lwfs by EGS/NFEC/AEC  Education_lwfs by TLC  \\\n",
      "0                               0                      0   \n",
      "1                               0                      0   \n",
      "2                               0                      0   \n",
      "3                               0                      0   \n",
      "4                               0                      0   \n",
      "\n",
      "   Education_lwfs by others  Education_middle  Education_not literate  \\\n",
      "0                         0                 0                       0   \n",
      "1                         0                 0                       0   \n",
      "2                         0                 1                       0   \n",
      "3                         0                 0                       0   \n",
      "4                         0                 1                       0   \n",
      "\n",
      "   Education_postgraduate and above  Education_primary  Education_secondary  \n",
      "0                                 0                  0                    1  \n",
      "1                                 0                  0                    0  \n",
      "2                                 0                  0                    0  \n",
      "3                                 0                  1                    0  \n",
      "4                                 0                  0                    0  \n",
      "\n",
      "[5 rows x 181 columns]\n"
     ]
    }
   ],
   "source": [
    "# Replace True/False with 1/0 in the entire DataFrame\n",
    "data = data.replace({True: 1, False: 0})\n",
    "\n",
    "# Confirm the replacement\n",
    "print(data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "202bbf4d-304c-49ac-a584-4b884d6fa717",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101662, 181)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "132a925f-ed2b-48c8-b525-5cef37591b44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking for missing values (NaN):\n",
      "HHID                                0\n",
      "cons_arhar_tur                      0\n",
      "cons_attaNormal                     0\n",
      "cons_attaPDS                        0\n",
      "cons_bajra                          0\n",
      "                                   ..\n",
      "Education_middle                    0\n",
      "Education_not literate              0\n",
      "Education_postgraduate and above    0\n",
      "Education_primary                   0\n",
      "Education_secondary                 0\n",
      "Length: 181, dtype: int64\n",
      "\n",
      "Checking for infinite values:\n",
      "HHID                                0\n",
      "cons_arhar_tur                      0\n",
      "cons_attaNormal                     0\n",
      "cons_attaPDS                        0\n",
      "cons_bajra                          0\n",
      "                                   ..\n",
      "Education_middle                    0\n",
      "Education_not literate              0\n",
      "Education_postgraduate and above    0\n",
      "Education_primary                   0\n",
      "Education_secondary                 0\n",
      "Length: 181, dtype: int64\n",
      "HHID                                0\n",
      "cons_arhar_tur                      0\n",
      "cons_attaNormal                     0\n",
      "cons_attaPDS                        0\n",
      "cons_bajra                          0\n",
      "                                   ..\n",
      "Education_middle                    0\n",
      "Education_not literate              0\n",
      "Education_postgraduate and above    0\n",
      "Education_primary                   0\n",
      "Education_secondary                 0\n",
      "Length: 181, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for missing or infinite values in the entire dataset\n",
    "print(\"Checking for missing values (NaN):\")\n",
    "print(data.isnull().sum())  # Count missing values per column\n",
    "\n",
    "print(\"\\nChecking for infinite values:\")\n",
    "print((data == float('inf')).sum())  # Count positive infinity values\n",
    "print((data == -float('inf')).sum())  # Count negative infinity values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "373cb4eb-af58-4d99-be85-d980c0593c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.replace([float('inf'), -float('inf')], pd.NA, inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d3b8445a-14ef-4c80-ae3a-cf71efedc022",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "be92eedf-5802-430e-9421-6d18765b9191",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'independent_vars' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[20], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m var \u001b[38;5;129;01min\u001b[39;00m independent_vars:\n\u001b[1;32m      2\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m var \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m data\u001b[38;5;241m.\u001b[39mcolumns:  \u001b[38;5;66;03m# Skip missing variables\u001b[39;00m\n\u001b[1;32m      3\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mVariable \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvar\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is missing from the dataset.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'independent_vars' is not defined"
     ]
    }
   ],
   "source": [
    "for var in independent_vars:\n",
    "    if var not in data.columns:  # Skip missing variables\n",
    "        print(f\"Variable {var} is missing from the dataset.\")\n",
    "        continue\n",
    "    \n",
    "    X = sm.add_constant(data[[var]])\n",
    "    y = data[dependent_var]\n",
    "    \n",
    "    if X.isnull().values.any() or not np.isfinite(X).all().all():\n",
    "        print(f\"Variable {var} contains NaN or infinite values.\")\n",
    "    else:\n",
    "        print(f\"Variable {var} is clean.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ffa37c45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The feature with the highest adjusted R^2 is: cons_clothes_tot\n",
      "Adjusted R^2: 0.2280282300071249\n"
     ]
    }
   ],
   "source": [
    "dependent_var = \"Cons_exp\"\n",
    "# Update independent variables\n",
    "\n",
    "independent_vars = [\"cons_attaNormal\", \"cons_attaPDS\", \"cons_bajra\", \"cons_bakery\", \"cons_beer\", \"cons_bidi\", \"cons_cereal_tot\", \"cons_cigarettes\", \"cons_coal\", \"cons_condensed_milk\",\n",
    "    \"cons_country_liquor\", \"cons_dryfruits_tot\", \"cons_dung_cake\", \"cons_egg_meat_tot\",\n",
    "    \"cons_electricity\", \"cons_firewood\", \"cons_fruits_tot\", \"cons_ghee\",\n",
    "    \"cons_green_chillies\", \"cons_gur\", \"cons_jowar\", \"cons_kerosene_PDS\",\n",
    "    \"cons_leaf_tobacco\", \"cons_leafyveggie\", \"cons_lemon\", \"cons_maida\", \"cons_masur\",\n",
    "    \"cons_milk\", \"cons_mineral_water\", \"cons_oil_tot\", \"cons_p_processed_food_tot\", \"cons_pan_tot\",\n",
    "    \"cons_peas\", \"cons_petrol\", \"cons_potato\", \"cons_pulses_tot\", \"cons_radish\", \"cons_ragi\",\n",
    "    \"cons_refined_liquor\", \"cons_refined_oil\", \"cons_riceNormal\", \"cons_ricePDS\", \"cons_salt\", \"cons_spices_tot\", \"cons_sugarPDS\", \"cons_toddy\",\n",
    "    \"cons_tomato\", \"cons_urd\", \"cons_vanaspati_oil\", \"cons_bedding_tot\", \"cons_clothes_tot\",\n",
    "    \"cons_footwear_tot\", \"cons_leather_sandals\", \"cons_leather_shoes\", \"cons_mosquito_net\",\n",
    "    \"cons_quilt_matress\", \"cons_rubber_footwear\", \"cons_secondhand_clothes\",\n",
    "    \"cons_secondhand_footware\", \"cons_uniform_boys\", \"cons_uniform_girls\", \"cons_doctor_fee\",\n",
    "    \"cons_educ_exp_tot\", \"cons_med_insti_tot\", \"cons_medicine\", \"cons_tuition_fee\",\n",
    "    \"cons_cable_TV\", \"cons_cinema\", \"cons_entertainment_tot\", \"cons_hobby_goods\", \"cons_internet_expense\",\n",
    "    \"cons_misc_HH_consumables_tot\", \"cons_non_insti_med_tot\", \"cons_pads\", \"cons_servant\",\n",
    "    \"cons_spectacle\", \"cons_toiletries\", \"cons_torch\", \"cons_water_bill\", \n",
    "    \"WH_Radio\", \"WH_electric_fan\", \"WH_AC_cooler\", \"WH_washing_machine\", \"WH_stove\", \"WH_fridge\", \n",
    "    \"WH_bicycle\", \"WH_motorcycle\", \"WH_car\", \"WH_PC_laptop\", \"WH_mobile\", \"WH_telephone\", \n",
    "    \"costly_dal\", \"cheap_dal\", \"basic_veggie\", \"non_basic_veggie\", \"rural\", \"Reg_salary_earner\", \n",
    "    \"has_ration_card\", \"Religion_buddhist\", \"Religion_christian\", \"Religion_hindu\", \"Religion_jain\", \n",
    "    \"Religion_muslim\", \"Religion_other\", \"Religion_parsi\", \"Religion_sikh\", \"Social_Group_OBC\", \n",
    "    \"Social_Group_SC\", \"Social_Group_ST\", \"Social_Group_other\", \"Type_of_land_owned_homestead & other\", \n",
    "    \"Type_of_land_owned_homestead only\", \"Type_of_land_owned_other only\", \"Cooking_Code_LPG\", \n",
    "    \"Cooking_Code_charcoal\", \"Cooking_Code_coke, coal\", \"Cooking_Code_dung cake\", \n",
    "    \"Cooking_Code_electricity\", \"Cooking_Code_firewood and chips\", \"Cooking_Code_gobar gas\", \n",
    "    \"Cooking_Code_kerosene\", \"Cooking_Code_no cooking arrangement\", \"Cooking_Code_others\", \n",
    "    \"type_of_ration_card_BPL\", \"type_of_ration_card_NoRation\", \"type_of_ration_card_others\", \n",
    "    \"Marital_status_currently married\", \"Marital_status_divorced/separated\", \n",
    "    \"Marital_status_never married\", \"Marital_status_widowed\", \"Education_diploma/certificate course\", \n",
    "    \"Education_graduate\", \"Education_higher secondary\", \"Education_lwfs below primary\", \n",
    "    \"Education_lwfs by EGS/NFEC/AEC\", \"Education_lwfs by TLC\", \"Education_lwfs by others\", \n",
    "    \"Education_middle\", \"Education_not literate\", \"Education_postgraduate and above\", \n",
    "    \"Education_primary\", \"Education_secondary\"\n",
    "]\n",
    "# Initialize a dictionary to store adjusted R^2 values\n",
    "adjusted_r2_results = {}\n",
    "\n",
    "# Loop through each independent variable\n",
    "for var in independent_vars:\n",
    "    X = sm.add_constant(data[[var]])  # Add a constant for the intercept\n",
    "    y = data[dependent_var]\n",
    "    \n",
    "    # Fit the model\n",
    "    model = sm.OLS(y, X).fit()\n",
    "    \n",
    "    # Compute adjusted R^2\n",
    "    adjusted_r2 = model.rsquared_adj\n",
    "    adjusted_r2_results[var] = adjusted_r2\n",
    "\n",
    "# Find the variable with the highest adjusted R^2\n",
    "best_feature = max(adjusted_r2_results, key=adjusted_r2_results.get)\n",
    "best_adj_r2 = adjusted_r2_results[best_feature]\n",
    "\n",
    "# Print the result\n",
    "print(f\"The feature with the highest adjusted R^2 is: {best_feature}\")\n",
    "print(f\"Adjusted R^2: {best_adj_r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3adc75d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 1: Added variable 'cons_entertainment_tot' with Adjusted R^2 = 0.30467509991582375\n",
      "Step 2: Added variable 'cons_lemon' with Adjusted R^2 = 0.3363789459128095\n",
      "Step 3: Added variable 'cons_med_insti_tot' with Adjusted R^2 = 0.36534990384800925\n",
      "Step 4: Added variable 'cons_misc_HH_consumables_tot' with Adjusted R^2 = 0.3832334461862371\n",
      "Step 5: Added variable 'cons_educ_exp_tot' with Adjusted R^2 = 0.3977078207041258\n",
      "Step 6: Added variable 'cons_non_insti_med_tot' with Adjusted R^2 = 0.4061546450702601\n",
      "Step 7: Added variable 'cons_egg_meat_tot' with Adjusted R^2 = 0.413534343548862\n",
      "Step 8: Added variable 'WH_car' with Adjusted R^2 = 0.4195030072261705\n",
      "Step 9: Added variable 'cons_milk' with Adjusted R^2 = 0.42280307256475014\n",
      "Step 10: Added variable 'cons_servant' with Adjusted R^2 = 0.4253060254011922\n",
      "Step 11: Added variable 'cons_refined_liquor' with Adjusted R^2 = 0.42761960590395076\n",
      "Step 12: Added variable 'Religion_parsi' with Adjusted R^2 = 0.428915119705664\n",
      "Step 13: Added variable 'cons_pulses_tot' with Adjusted R^2 = 0.4301277670057587\n",
      "Step 14: Added variable 'cons_internet_expense' with Adjusted R^2 = 0.4308647524369331\n",
      "Step 15: Added variable 'cons_cable_TV' with Adjusted R^2 = 0.4317129824206327\n",
      "Step 16: Added variable 'cons_electricity' with Adjusted R^2 = 0.43249823377892915\n",
      "Step 17: Added variable 'Type_of_land_owned_homestead only' with Adjusted R^2 = 0.43320071844887076\n",
      "Step 18: Added variable 'cons_jowar' with Adjusted R^2 = 0.4337685072260292\n",
      "Step 19: Added variable 'cons_dryfruits_tot' with Adjusted R^2 = 0.4341696907401944\n",
      "Step 20: Added variable 'cons_cinema' with Adjusted R^2 = 0.4345908050676287\n",
      "Step 21: Added variable 'Reg_salary_earner' with Adjusted R^2 = 0.4349459273963382\n",
      "Step 22: Added variable 'cons_vanaspati_oil' with Adjusted R^2 = 0.4352894446421868\n",
      "Step 23: Added variable 'cons_country_liquor' with Adjusted R^2 = 0.43562333302113554\n",
      "Step 24: Added variable 'cons_quilt_matress' with Adjusted R^2 = 0.435901527714883\n",
      "Step 25: Added variable 'cons_firewood' with Adjusted R^2 = 0.4361424774206685\n",
      "Step 26: Added variable 'Cooking_Code_no cooking arrangement' with Adjusted R^2 = 0.43634281643122486\n",
      "Step 27: Added variable 'cons_cereal_tot' with Adjusted R^2 = 0.4365418688791619\n",
      "Step 28: Added variable 'cons_leather_sandals' with Adjusted R^2 = 0.43673391844668963\n",
      "Step 29: Added variable 'cons_uniform_boys' with Adjusted R^2 = 0.4369198183949713\n",
      "Step 30: Added variable 'WH_PC_laptop' with Adjusted R^2 = 0.43706891162847716\n",
      "Step 31: Added variable 'Type_of_land_owned_homestead & other' with Adjusted R^2 = 0.43720227141845025\n",
      "Step 32: Added variable 'cons_spices_tot' with Adjusted R^2 = 0.437329062808103\n",
      "Step 33: Added variable 'costly_dal' with Adjusted R^2 = 0.43745251613586966\n",
      "Step 34: Added variable 'cons_sugarPDS' with Adjusted R^2 = 0.4375956861516449\n",
      "Step 35: Added variable 'cons_tomato' with Adjusted R^2 = 0.4377139113931593\n",
      "Step 36: Added variable 'WH_telephone' with Adjusted R^2 = 0.43780220426465943\n",
      "Step 37: Added variable 'cons_potato' with Adjusted R^2 = 0.4378764012158233\n",
      "Step 38: Added variable 'Religion_hindu' with Adjusted R^2 = 0.43794715014702856\n",
      "Step 39: Added variable 'cons_rubber_footwear' with Adjusted R^2 = 0.43801454808593965\n",
      "Step 40: Added variable 'cons_refined_oil' with Adjusted R^2 = 0.43807527655772827\n",
      "Step 41: Added variable 'WH_AC_cooler' with Adjusted R^2 = 0.4381355478651736\n",
      "Step 42: Added variable 'WH_fridge' with Adjusted R^2 = 0.43822397620238995\n",
      "Step 43: Added variable 'Education_middle' with Adjusted R^2 = 0.4382822938137615\n",
      "Step 44: Added variable 'cons_leather_shoes' with Adjusted R^2 = 0.4383377355206396\n",
      "Step 45: Added variable 'Social_Group_OBC' with Adjusted R^2 = 0.4383746985656517\n",
      "Step 46: Added variable 'WH_bicycle' with Adjusted R^2 = 0.43841317247660905\n",
      "Step 47: Added variable 'cons_hobby_goods' with Adjusted R^2 = 0.4384441720412444\n",
      "Step 48: Added variable 'Marital_status_widowed' with Adjusted R^2 = 0.43847230233982604\n",
      "Step 49: Added variable 'cons_p_processed_food_tot' with Adjusted R^2 = 0.438498902518092\n",
      "Step 50: Added variable 'cons_beer' with Adjusted R^2 = 0.4385172074756216\n",
      "Step 51: Added variable 'cons_ghee' with Adjusted R^2 = 0.4385365147495671\n",
      "Step 52: Added variable 'Education_higher secondary' with Adjusted R^2 = 0.43855399899857184\n",
      "Step 53: Added variable 'cons_dung_cake' with Adjusted R^2 = 0.43857058845938346\n",
      "Step 54: Added variable 'cons_cigarettes' with Adjusted R^2 = 0.4385868233142045\n",
      "Step 55: Added variable 'cons_fruits_tot' with Adjusted R^2 = 0.4386017530157613\n",
      "Step 56: Added variable 'cons_toiletries' with Adjusted R^2 = 0.43861860016819954\n",
      "Step 57: Added variable 'cons_mineral_water' with Adjusted R^2 = 0.4386333298157725\n",
      "Step 58: Added variable 'cons_pads' with Adjusted R^2 = 0.43864848751171315\n",
      "Step 59: Added variable 'cons_footwear_tot' with Adjusted R^2 = 0.4386588848827583\n",
      "Step 60: Added variable 'cons_condensed_milk' with Adjusted R^2 = 0.4386643439453991\n",
      "Step 61: Added variable 'cons_peas' with Adjusted R^2 = 0.438667713249283\n",
      "Step 62: Added variable 'rural' with Adjusted R^2 = 0.4386694638381857\n",
      "Step 63: Added variable 'has_ration_card' with Adjusted R^2 = 0.43867281466588426\n",
      "Step 64: Added variable 'cons_kerosene_PDS' with Adjusted R^2 = 0.43868713293227224\n",
      "Step 65: Added variable 'WH_washing_machine' with Adjusted R^2 = 0.43869012754099246\n",
      "Step 66: Added variable 'cons_maida' with Adjusted R^2 = 0.4386900939729905\n",
      "Step 67: Added variable 'cons_petrol' with Adjusted R^2 = 0.43869059516066344\n",
      "Step 68: Added variable 'cons_secondhand_clothes' with Adjusted R^2 = 0.4386916401042119\n",
      "Step 69: Added variable 'cons_mosquito_net' with Adjusted R^2 = 0.43868979358901394\n",
      "Step 70: Added variable 'cons_pan_tot' with Adjusted R^2 = 0.4386865662265875\n",
      "Step 71: Added variable 'type_of_ration_card_others' with Adjusted R^2 = 0.43868258198390364\n",
      "Step 72: Added variable 'WH_electric_fan' with Adjusted R^2 = 0.43867824578136927\n",
      "Step 73: Added variable 'Social_Group_ST' with Adjusted R^2 = 0.43867322279905274\n",
      "Step 74: Added variable 'cons_riceNormal' with Adjusted R^2 = 0.4386686013084118\n",
      "Step 75: Added variable 'cons_bidi' with Adjusted R^2 = 0.4386651491859278\n",
      "Step 76: Added variable 'Education_diploma/certificate course' with Adjusted R^2 = 0.4386607150866789\n",
      "Step 77: Added variable 'Cooking_Code_kerosene' with Adjusted R^2 = 0.4386522608801545\n",
      "Step 78: Added variable 'cons_bedding_tot' with Adjusted R^2 = 0.43864195974818054\n",
      "Step 79: Added variable 'cons_tuition_fee' with Adjusted R^2 = 0.4386319351585086\n",
      "Step 80: Added variable 'cons_leafyveggie' with Adjusted R^2 = 0.4386202558276868\n",
      "Step 81: Added variable 'cons_spectacle' with Adjusted R^2 = 0.4386084958459303\n",
      "Step 82: Added variable 'WH_motorcycle' with Adjusted R^2 = 0.4385964436537324\n",
      "Step 83: Added variable 'cons_doctor_fee' with Adjusted R^2 = 0.43858387998876014\n",
      "Step 84: Added variable 'cons_leaf_tobacco' with Adjusted R^2 = 0.4385711047302808\n",
      "Step 85: Added variable 'Cooking_Code_firewood and chips' with Adjusted R^2 = 0.43855777082798075\n",
      "Step 86: Added variable 'cons_radish' with Adjusted R^2 = 0.4385444137620742\n",
      "Step 87: Added variable 'basic_veggie' with Adjusted R^2 = 0.43853820567154855\n",
      "Step 88: Added variable 'cheap_dal' with Adjusted R^2 = 0.4385233376536384\n",
      "Step 89: Added variable 'cons_masur' with Adjusted R^2 = 0.43851290230023243\n",
      "Step 90: Added variable 'cons_gur' with Adjusted R^2 = 0.43849929699427426\n",
      "Step 91: Added variable 'Cooking_Code_others' with Adjusted R^2 = 0.4384844613114769\n",
      "Step 92: Added variable 'Education_lwfs by others' with Adjusted R^2 = 0.4384689890333585\n",
      "Step 93: Added variable 'cons_water_bill' with Adjusted R^2 = 0.43845291395988706\n",
      "Step 94: Added variable 'Social_Group_other' with Adjusted R^2 = 0.4384366970845711\n",
      "Step 95: Added variable 'cons_green_chillies' with Adjusted R^2 = 0.43842034738974667\n",
      "Step 96: Added variable 'Cooking_Code_coke, coal' with Adjusted R^2 = 0.43840400752063113\n",
      "Step 97: Added variable 'cons_toddy' with Adjusted R^2 = 0.4383872506278008\n",
      "Step 98: Added variable 'cons_bakery' with Adjusted R^2 = 0.4383699707818851\n",
      "Step 99: Added variable 'WH_mobile' with Adjusted R^2 = 0.43835268489023316\n",
      "Step 100: Added variable 'Type_of_land_owned_other only' with Adjusted R^2 = 0.43833525027178655\n",
      "Step 101: Added variable 'cons_oil_tot' with Adjusted R^2 = 0.438317400998986\n",
      "Step 102: Added variable 'Education_secondary' with Adjusted R^2 = 0.4382994735059036\n",
      "Step 103: Added variable 'cons_coal' with Adjusted R^2 = 0.4382814057979194\n",
      "Step 104: Added variable 'cons_uniform_girls' with Adjusted R^2 = 0.4382632658609822\n",
      "Step 105: Added variable 'Religion_muslim' with Adjusted R^2 = 0.43824509898003605\n",
      "Step 106: Added variable 'Religion_jain' with Adjusted R^2 = 0.43822733751190146\n",
      "Step 107: Added variable 'Marital_status_divorced/separated' with Adjusted R^2 = 0.4382091244388777\n",
      "Step 108: Added variable 'Education_postgraduate and above' with Adjusted R^2 = 0.43819081187702735\n",
      "Step 109: Added variable 'Cooking_Code_charcoal' with Adjusted R^2 = 0.43817248569954526\n",
      "Step 110: Added variable 'cons_attaPDS' with Adjusted R^2 = 0.43815381653299745\n",
      "Step 111: Added variable 'Marital_status_currently married' with Adjusted R^2 = 0.43813518725956835\n",
      "Step 112: Added variable 'Marital_status_never married' with Adjusted R^2 = 0.4381351872595668\n",
      "Step 113: Added variable 'cons_torch' with Adjusted R^2 = 0.4381164655005696\n",
      "Step 114: Added variable 'Education_graduate' with Adjusted R^2 = 0.43809764464575696\n",
      "Step 115: Added variable 'WH_stove' with Adjusted R^2 = 0.4380785752086106\n",
      "Step 116: Added variable 'Cooking_Code_dung cake' with Adjusted R^2 = 0.4380597459194213\n",
      "Step 117: Added variable 'Religion_other' with Adjusted R^2 = 0.43804066925848173\n",
      "Step 118: Added variable 'type_of_ration_card_BPL' with Adjusted R^2 = 0.43802153559040635\n",
      "Step 119: Added variable 'type_of_ration_card_NoRation' with Adjusted R^2 = 0.43800231855407723\n",
      "Step 120: Added variable 'cons_secondhand_footware' with Adjusted R^2 = 0.43798306038777246\n",
      "Step 121: Added variable 'cons_urd' with Adjusted R^2 = 0.4379636445456814\n",
      "Step 122: Added variable 'Education_lwfs below primary' with Adjusted R^2 = 0.43794418525081713\n",
      "Step 123: Added variable 'Cooking_Code_electricity' with Adjusted R^2 = 0.43792466435364574\n",
      "Step 124: Added variable 'cons_bajra' with Adjusted R^2 = 0.4379050388784892\n",
      "Step 125: Added variable 'cons_attaNormal' with Adjusted R^2 = 0.4378855300848291\n",
      "Step 126: Added variable 'cons_ricePDS' with Adjusted R^2 = 0.43786701421366625\n",
      "Step 127: Added variable 'Education_primary' with Adjusted R^2 = 0.43784725690567494\n",
      "Step 128: Added variable 'cons_medicine' with Adjusted R^2 = 0.43782747470229655\n",
      "Step 129: Added variable 'non_basic_veggie' with Adjusted R^2 = 0.4378076683511587\n",
      "Step 130: Added variable 'cons_salt' with Adjusted R^2 = 0.43778785370991125\n",
      "Step 131: Added variable 'Cooking_Code_gobar gas' with Adjusted R^2 = 0.43776803147626653\n",
      "Step 132: Added variable 'Cooking_Code_LPG' with Adjusted R^2 = 0.43774826939463496\n",
      "Step 133: Added variable 'Social_Group_SC' with Adjusted R^2 = 0.43772843715953647\n",
      "Step 134: Added variable 'cons_ragi' with Adjusted R^2 = 0.4377086006455809\n",
      "Step 135: Added variable 'WH_Radio' with Adjusted R^2 = 0.43768875019731257\n",
      "Step 136: Added variable 'Education_lwfs by TLC' with Adjusted R^2 = 0.4376688776285278\n",
      "Step 137: Added variable 'Religion_sikh' with Adjusted R^2 = 0.43764899907249477\n",
      "Step 138: Added variable 'Education_lwfs by EGS/NFEC/AEC' with Adjusted R^2 = 0.43762911642339963\n",
      "Step 139: Added variable 'Education_not literate' with Adjusted R^2 = 0.4376291164234003\n",
      "Step 140: Added variable 'Religion_christian' with Adjusted R^2 = 0.4376092321460425\n",
      "Step 141: Added variable 'Religion_buddhist' with Adjusted R^2 = 0.4376092321460415\n",
      "\n",
      "Final selected variables: ['cons_clothes_tot', 'cons_entertainment_tot', 'cons_lemon', 'cons_med_insti_tot', 'cons_misc_HH_consumables_tot', 'cons_educ_exp_tot', 'cons_non_insti_med_tot', 'cons_egg_meat_tot', 'WH_car', 'cons_milk', 'cons_servant', 'cons_refined_liquor', 'Religion_parsi', 'cons_pulses_tot', 'cons_internet_expense', 'cons_cable_TV', 'cons_electricity', 'Type_of_land_owned_homestead only', 'cons_jowar', 'cons_dryfruits_tot', 'cons_cinema', 'Reg_salary_earner', 'cons_vanaspati_oil', 'cons_country_liquor', 'cons_quilt_matress', 'cons_firewood', 'Cooking_Code_no cooking arrangement', 'cons_cereal_tot', 'cons_leather_sandals', 'cons_uniform_boys', 'WH_PC_laptop', 'Type_of_land_owned_homestead & other', 'cons_spices_tot', 'costly_dal', 'cons_sugarPDS', 'cons_tomato', 'WH_telephone', 'cons_potato', 'Religion_hindu', 'cons_rubber_footwear', 'cons_refined_oil', 'WH_AC_cooler', 'WH_fridge', 'Education_middle', 'cons_leather_shoes', 'Social_Group_OBC', 'WH_bicycle', 'cons_hobby_goods', 'Marital_status_widowed', 'cons_p_processed_food_tot', 'cons_beer', 'cons_ghee', 'Education_higher secondary', 'cons_dung_cake', 'cons_cigarettes', 'cons_fruits_tot', 'cons_toiletries', 'cons_mineral_water', 'cons_pads', 'cons_footwear_tot', 'cons_condensed_milk', 'cons_peas', 'rural', 'has_ration_card', 'cons_kerosene_PDS', 'WH_washing_machine', 'cons_maida', 'cons_petrol', 'cons_secondhand_clothes', 'cons_mosquito_net', 'cons_pan_tot', 'type_of_ration_card_others', 'WH_electric_fan', 'Social_Group_ST', 'cons_riceNormal', 'cons_bidi', 'Education_diploma/certificate course', 'Cooking_Code_kerosene', 'cons_bedding_tot', 'cons_tuition_fee', 'cons_leafyveggie', 'cons_spectacle', 'WH_motorcycle', 'cons_doctor_fee', 'cons_leaf_tobacco', 'Cooking_Code_firewood and chips', 'cons_radish', 'basic_veggie', 'cheap_dal', 'cons_masur', 'cons_gur', 'Cooking_Code_others', 'Education_lwfs by others', 'cons_water_bill', 'Social_Group_other', 'cons_green_chillies', 'Cooking_Code_coke, coal', 'cons_toddy', 'cons_bakery', 'WH_mobile', 'Type_of_land_owned_other only', 'cons_oil_tot', 'Education_secondary', 'cons_coal', 'cons_uniform_girls', 'Religion_muslim', 'Religion_jain', 'Marital_status_divorced/separated', 'Education_postgraduate and above', 'Cooking_Code_charcoal', 'cons_attaPDS', 'Marital_status_currently married', 'Marital_status_never married', 'cons_torch', 'Education_graduate', 'WH_stove', 'Cooking_Code_dung cake', 'Religion_other', 'type_of_ration_card_BPL', 'type_of_ration_card_NoRation', 'cons_secondhand_footware', 'cons_urd', 'Education_lwfs below primary', 'Cooking_Code_electricity', 'cons_bajra', 'cons_attaNormal', 'cons_ricePDS', 'Education_primary', 'cons_medicine', 'non_basic_veggie', 'cons_salt', 'Cooking_Code_gobar gas', 'Cooking_Code_LPG', 'Social_Group_SC', 'cons_ragi', 'WH_Radio', 'Education_lwfs by TLC', 'Religion_sikh', 'Education_lwfs by EGS/NFEC/AEC', 'Education_not literate', 'Religion_christian', 'Religion_buddhist']\n"
     ]
    }
   ],
   "source": [
    "fixed_vars = [\"cons_clothes_tot\"]\n",
    "remaining_vars = [var for var in independent_vars if var not in fixed_vars]\n",
    "\n",
    "# Store results for each step\n",
    "stepwise_results = []\n",
    "\n",
    "while remaining_vars:\n",
    "    best_adj_r2 = -float(\"inf\")\n",
    "    best_var = None\n",
    "\n",
    "    # Evaluate adjusted R^2 for adding each remaining variable\n",
    "    for var in remaining_vars:\n",
    "        X = sm.add_constant(data[fixed_vars + [var]])  # Add constant and current variables\n",
    "        y = data[dependent_var]\n",
    "        \n",
    "        # Fit the model\n",
    "        model = sm.OLS(y, X).fit()\n",
    "        \n",
    "        # Compute adjusted R^2\n",
    "        adjusted_r2 = model.rsquared_adj\n",
    "        \n",
    "        # Keep track of the variable with the highest adjusted R^2\n",
    "        if adjusted_r2 > best_adj_r2:\n",
    "            best_adj_r2 = adjusted_r2\n",
    "            best_var = var\n",
    "\n",
    "    # Add the best variable to fixed variables\n",
    "    if best_var:\n",
    "        fixed_vars.append(best_var)\n",
    "        remaining_vars.remove(best_var)\n",
    "        stepwise_results.append((best_var, best_adj_r2))\n",
    "    else:\n",
    "        break\n",
    "\n",
    "# Output the results\n",
    "for step, (variable, adj_r2) in enumerate(stepwise_results, start=1):\n",
    "    print(f\"Step {step}: Added variable '{variable}' with Adjusted R^2 = {adj_r2}\")\n",
    "\n",
    "print(\"\\nFinal selected variables:\", fixed_vars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5fa61a4-ede5-4dc7-944a-d302b82141c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
